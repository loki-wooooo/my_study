#server:
#  port: 8000
#
### eureka 등록
#eureka:
#  client:
#    register-with-eureka: true
#    fetch-registry: true
#    service-url:
#      default-zone: http://localhost:8761/eureka
#
#spring:
#  application:
#    name: apigateway-service
#  cloud:
#    gateway:
#      routes:
#        - id: first-service
##          uri: http://localhost:8081/
#          uri: lb://MY-FIRST-SERVICE
#          predicates: #???
#            - Path=/first-service/**
#          filters:
##            - AddRequestHeader=first-request, first-request-header2
##            - AddResponseHeader=first-response, first-response-header2
#            - CustomFilter
#        - id: second-service
##          uri: http://localhost:8082/
#          uri: lb://MY-SECOND-SERVICE
#          predicates: #???
#            - Path=/second-service/**
#          filters:
##            - AddRequestHeader=second-request, second-request-header2
##            - AddResponseHeader=second-response, second-response-header2
#            - name: CustomFilter
#
#              # 추가적인 내용이 필요하면 'name', 'args' 필수
#            - name: LoggingFilter
#              args:
#                baseMessage: Spring Cloud Gateway LoggingFilter
#                preLogger: true
#                postLogger: true
#      default-filters:
#        - name: GlobalFilter
#          args:
#            baseMessage: Spring Cloud Gateway GlobalFilter
#            preLogger: true
#            postLogger: true

### TO-BE
server:
  port: 8000

## eureka 등록
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      default-zone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # request Header를 초기화해서 받음
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # url 요청에 따른 각 해당 서비스에 형태로 변경처리

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # request Header를 초기화해서 받음
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # url 요청에 따른 각 해당 서비스에 형태로 변경처리

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie # request Header를 초기화해서 받음
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # url 요청에 따른 각 해당 서비스에 형태로 변경처리
            - AuthorizationHeaderFilter # filter 처리

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates: #???
            - Path=/second-service/**
          filters:
            - name: CustomFilter
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway GlobalFilter
            preLogger: true
            postLogger: true

token:
  secret: user_token